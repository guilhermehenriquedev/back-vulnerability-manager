import csv
import io
import time
from rest_framework import viewsets, status
from rest_framework.decorators import action
from rest_framework.response import Response
from dash.core.models import AssetVulnerability
from dash.core.serializer import AssetVulnerabilityMS
from dash.core.repository.repository import Repository


class ReportViewSet(viewsets.ModelViewSet):
    '''Endpoint para exibir e importar dados do CSV'''

    queryset = AssetVulnerability.objects.all()
    serializer_class = AssetVulnerabilityMS

    def get_serializer_class(self):
        actions = [
            'post',
            'update',
        ]

        if self.action in actions:
            return AssetVulnerabilityMS
        return self.serializer_class

    @action(detail=False, methods=['post'], url_path='new_data')
    def add_new_data(self, request):
        ''' Endpoint para carregar novos dados na tabela asset_vulnerability 
            importados de arquivo csv
        '''
        start_time = time.time()

        _file = request.FILES.get('file', None)
        decoded_file = _file.read().decode('utf-8')
        io_string = io.StringIO(decoded_file)
        data = csv.reader(io_string, delimiter=',')
        next(data) #pula pra proxima linha, fazendo com que o cabeçalho não apareça

        repo = Repository()
        repo.clean_database(table='asset_vulnerability') #Limpa todos os dados da tabela e reseta a key
        
        colums = ['hostname', 'ip_addres', 'title', 'severity', 'cvss', 'publication_date']
        for line in data:
            repo.insert_data(table='asset_vulnerability', columns=colums, values=line)
        
        elapsed_time = time.time() - start_time
        print(f'Tempo decorrido..: {time.strftime("%H:%M:%S", time.gmtime(elapsed_time))}')

        return Response(data={'message': 'Tabela atualizada com sucesso'}, status=status.HTTP_200_OK)
