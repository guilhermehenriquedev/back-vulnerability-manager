import logging
from rest_framework import viewsets, status
from rest_framework.response import Response
from rest_framework.decorators import action
from dash.core.repository.metricas import Metricas


#Bloco de configuração dos logs
logger = logging.getLogger(__name__)
logger.setLevel(logging.DEBUG)
formatter = logging.Formatter('%(asctime)s | %(levelname)s | %(message)s')
fh = logging.FileHandler('logs/dash-application.log')
fh.setFormatter(formatter)
logger.addHandler(fh)


class MetricasViewSet(viewsets.ViewSet):
    ''' EndPoint para Metricas'''

    @action(detail=False, methods=['get'], url_path='severity_sum')
    def severity_sum(self, request):
        ''' Soma as os tipos de gravidades da tabela asset_vulnerability'''

        if request.method == 'GET':
            logging.info('Buscando dados de métricas (severity_sum)')
            metricas = Metricas()
            response = metricas.severity_sum()

            return Response(data=response, status=status.HTTP_200_OK)

    @action(detail=False, methods=['get'], url_path='status_sum')
    def status_sum(self, request):
        ''' Soma as os tipos de status da tabela asset_vulnerability'''

        if request.method == 'GET':
            logging.info('Buscando dados de métricas (status_sum)')
            metricas = Metricas()
            response = metricas.status_sum()

            return Response(data=response, status=status.HTTP_200_OK)

    @action(detail=False, methods=['get'], url_path='host_sum')
    def host_sum(self, request):
        ''' Soma os niveis de gravidade dos host de forma distinta '''

        if request.method == 'GET':
            logging.info('Buscando dados de métricas (host_sum)')
            metricas = Metricas()
            response = metricas.host_sum()

            return Response(data=response, status=status.HTTP_200_OK)
