from django.db import connections
from dash.core.helpers.utils import dictfetchall

class Metricas():
    """ Funções para serem utilizado os dados como métricas """

    def severity_sum(self):
        """  Soma os tipos gravidades  """

        with connections["default"].cursor() as cursor:
            _sql = f"""SELECT 
                        sum(case when severity == 'Baixo' THEN 1 ELSE 0 END) AS "baixo",
                        sum(case when severity == 'Médio' THEN 1 ELSE 0 END) AS "medio",
                        sum(case when severity == 'Alto' THEN 1 ELSE 0 END) AS "alto",
                        sum(case when severity == 'Crítico' THEN 1 ELSE 0 END) AS "critico"
                    FROM asset_vulnerability"""

            cursor.execute(_sql)
            data = dictfetchall(cursor)

        return data if data else None

    def status_sum(self):
        """ Soma os statius das demandas (CORRIGIDAS e NÃO CORRIGIDAS) """

        with connections["default"].cursor() as cursor:
            _sql = f"""SELECT 
                        sum(case when status == 'CORRIGIDA' THEN 1 ELSE 0 END) AS "corrigidas",
                        sum(case when status == 'NÃO CORRIGIDA' or status is null THEN 1 ELSE 0 END) AS "nao_corrigidas"
                    FROM asset_vulnerability"""

            cursor.execute(_sql)
            data = dictfetchall(cursor)

        return data if data else None

    def host_sum(self):
        """ Soma os niveis de gravidade dos host de forma distinta """
        
        with connections["default"].cursor() as cursor:
            _sql = f"""
                        SELECT hostname,
                               sum(case when severity == 'Baixo' THEN 1 ELSE 0 END) AS "baixo",
                               sum(case when severity == 'Médio'THEN 1 ELSE 0 END) AS "medio",
                               sum(case when severity == 'Alto'THEN 1 ELSE 0 END) AS "alto",
                               sum(case when severity == 'Crítico' THEN 1 ELSE 0 END) AS "critico"
                        FROM asset_vulnerability
                        GROUP BY hostname;
                    """

            cursor.execute(_sql)
            data = dictfetchall(cursor)

        return data if data else None



